grf {
	grfid: "UFI\86";
	name: string(STR_GRF_NAME_METRO);
	desc: string(STR_GRF_DESCRIPTION_METRO);
	url:  string(STR_GRF_URL);
	version: 20;
	min_compatible_version: 10;
			param 0 {
        param_gui {
            type: int;
            name: string(STR_PARAM_GUI_NAME);
            desc: string(STR_PARAM_GUI_DESC);
			min_value: 0;
			max_value: 3;
            def_value: 0;
           names: {
					0: string(STR_PARAM_GUI_0);
					1: string(STR_PARAM_GUI_1);
                    2: string(STR_PARAM_GUI_2);
                    3: string(STR_PARAM_GUI_3);
                    };
				}
			}
  }

if (ttd_platform != PLATFORM_OPENTTD || (openttd_version < version_openttd(13, 0))) {
		error(FATAL, REQUIRES_OPENTTD, string(STR_OPENTTD_VERSION));
	}
//==================================================================================================================================
//								PARAMETR
//==================================================================================================================================
if (((grf_future_status("UFI\88"))&&(param["UFI\88", 0] == 0)) || ((grf_future_status("UFI\89"))&&(param["UFI\89", 0] == 0))) {param[0] = 0;}
if (((grf_future_status("UFI\88"))&&(param["UFI\88", 0] == 1)) || ((grf_future_status("UFI\89"))&&(param["UFI\89", 0] == 1))) {param[0] = 1;}
if (((grf_future_status("UFI\88"))&&(param["UFI\88", 0] == 2)) || ((grf_future_status("UFI\89"))&&(param["UFI\89", 0] == 2))) {param[0] = 2;}
if (((grf_future_status("UFI\88"))&&(param["UFI\88", 0] == 3)) || ((grf_future_status("UFI\89"))&&(param["UFI\89", 0] == 3))) {param[0] = 3;}
//==================================================================================================================================
//								PARAMETR COST
//==================================================================================================================================
if ((grf_future_status("UFI\88") != 1) || (grf_future_status("UFI\89") != 1)) {
     basecost {
          PR_BUILD_ROAD: -1;
     }
     basecost {
         PR_MAINTENANCE_ROAD: -2;
     }
}
//==================================================================================================================================
//								Templates
//==================================================================================================================================
template ground_tile(x, y) { [x, y, 64, 31, -31, 0] }
template tmpl_underlay_overlay_straight(y) {
    ground_tile(  1,  y)
    ground_tile( 70,  y)
}
template tmpl_underlay_overlay_junctions(y) {
    ground_tile(139,  y)
    ground_tile(208,  y)
    ground_tile(277,  y)
    ground_tile(346,  y)
    ground_tile(415,  y)
}
template tmpl_underlay_overlay_corners(y) {
    ground_tile(484,  y)
    ground_tile(553,  y)
    ground_tile(622,  y)
    ground_tile(691,  y)
}
template tmpl_underlay_overlay_slope(y) {
    [    1,   y+36,   64,   39,   -31,   -8]
    [   70,   y+36,   64,   23,   -31,    0]
    [  139,   y+36,   64,   23,   -31,    0]
    [  208,   y+36,   64,   39,   -31,   -8]
}
template tmpl_underlay_overlay_half_tiles(y) {
    ground_tile(277, y+36)
    ground_tile(346, y+36)
    ground_tile(415, y+36)
    ground_tile(484, y+36)
}
template tmpl_underlay_overlay(y) {
    tmpl_underlay_overlay_straight(y)
    tmpl_underlay_overlay_junctions(y)
    tmpl_underlay_overlay_corners(y)
    tmpl_underlay_overlay_slope(y)
    tmpl_underlay_overlay_half_tiles(y)
}

template tmpl_bridge_straight(x) {
    ground_tile(  1+x, 401)
    ground_tile( 70+x, 401)
}
template tmpl_bridge_slope(x) {
    [  139+x,  401,   64,   39,   -31,   -8]
    [  208+x,  401,   64,   23,   -31,    0]
    [  277+x,  401,   64,   23,   -31,    0]
    [  346+x,  401,   64,   39,   -31,   -8]
}
template tmpl_bridge_surfaces(x) {
    tmpl_bridge_straight(x)
    tmpl_bridge_slope(x)
}

template tmpl_depot(x) {
    [    1+x,  445,   64,   61,   -31,  -30]
    [   70+x,  445,   64,   61,    -1,  -45]
    [  139+x,  445,   64,   61,   -31,  -30]
    [  208+x,  445,   64,   61,   -61,  -45]
    [  277+x,  445,   64,   61,   -61,  -45]
    [  346+x,  445,   64,   61,    -1,  -45]
}

template tmpl_tunnels(x, y) {
    ground_tile(  1+x, 547+y)
    ground_tile( 70+x, 547+y)
    ground_tile(139+x, 547+y)
    ground_tile(208+x, 547+y)
}

template tmpl_icon_gui(x, y)   { [x, y, 20, 20, 0, 0] }
template tmpl_cursor_gui(x, y) { [x, y, 32, 32, 0, 0] }
template tmpl_GFX_gui() {
    tmpl_icon_gui(  1, 619)
    tmpl_icon_gui( 22, 619)
    tmpl_icon_gui( 43, 619)
    tmpl_icon_gui( 64, 619)
    tmpl_icon_gui( 85, 619)
    tmpl_icon_gui(106, 619)

    tmpl_cursor_gui(  1, 640)
    tmpl_cursor_gui( 34, 640)
    tmpl_cursor_gui( 67, 640)
    tmpl_cursor_gui(100, 640)
    tmpl_cursor_gui(133, 640)
    tmpl_cursor_gui(166, 640)
}

template tmpl_TTD_gui() {
    tmpl_icon_gui(  1, 619)
    tmpl_icon_gui( 22, 619)
    tmpl_icon_gui( 43, 619)
    tmpl_icon_gui( 64, 619)
    tmpl_icon_gui( 85, 619)
    tmpl_icon_gui(106, 619)

    tmpl_cursor_gui(  1, 673)
    tmpl_cursor_gui( 34, 673)
    tmpl_cursor_gui( 67, 673)
    tmpl_cursor_gui(100, 673)
    tmpl_cursor_gui(133, 673)
    tmpl_cursor_gui(166, 673)
}

template tmpl_GFX_Classic_gui() {
    tmpl_icon_gui(  1, 619)
    tmpl_icon_gui( 22, 619)
    tmpl_icon_gui( 43, 619)
    tmpl_icon_gui( 64, 619)
    tmpl_icon_gui( 85, 619)
    tmpl_icon_gui(106, 619)

    tmpl_cursor_gui(  1, 779)
    tmpl_cursor_gui( 34, 779)
    tmpl_cursor_gui( 67, 779)
    tmpl_cursor_gui(100, 779)
    tmpl_cursor_gui(133, 779)
    tmpl_cursor_gui(166, 779)
}

template tmpl_icon_UGUI(x, y)   { [x, y, 30, 30, 0, 0] }
template tmpl_cursor_UGUI(x, y) { [x, y, 32, 38, 0, 0] }
template tmpl_UGUI_gui() {
    tmpl_icon_UGUI(  1, 706)
    tmpl_icon_UGUI( 34, 706)
    tmpl_icon_UGUI( 67, 706)
    tmpl_icon_UGUI(100, 706)
    tmpl_icon_UGUI(133, 706)
    tmpl_icon_UGUI(166, 706)

    tmpl_cursor_UGUI(  1, 740)
    tmpl_cursor_UGUI( 34, 740)
    tmpl_cursor_UGUI( 67, 740)
    tmpl_cursor_UGUI(100, 740)
    tmpl_cursor_UGUI(133, 740)
    tmpl_cursor_UGUI(166, 740)
}
//==================================================================================================================================
//								SPRITES
//==================================================================================================================================
//===========================================================
//					MODERN TRAM TRACK (RAIL)
//===========================================================
spriteset(RAIL_underlay_0, "gfx/T_RAIL.png") {
    tmpl_underlay_overlay(1)
}
spriteset(RAIL_snow_underlay_0, "gfx/T_RAIL.png") {
    tmpl_underlay_overlay(81)
}
spriteset(RAIL_underlay_1, "gfx/T_RAIL.png") {
    tmpl_underlay_overlay(161)
}
spriteset(RAIL_snow_underlay_1, "gfx/T_RAIL.png") {
    tmpl_underlay_overlay(241)
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_underlay_0, terrain_type) {
    TILETYPE_SNOW: RAIL_snow_underlay_0;
    RAIL_underlay_0;
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_underlay_1, terrain_type) {
    TILETYPE_SNOW: RAIL_snow_underlay_1;
    RAIL_underlay_1;
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_underlay, town_zone) {									//UNDERLAY
	TOWNZONE_EDGE: switch_RAIL_underlay_0;
	switch_RAIL_underlay_1;
}

spriteset(RAIL_bridge, "gfx/T_RAIL.png") {
    tmpl_bridge_surfaces(0)
}
spriteset(RAIL_snow_bridge, "gfx/T_RAIL.png") {
    tmpl_bridge_surfaces(414)
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_bridge, terrain_type) {								//BRIDGE
    TILETYPE_SNOW: RAIL_snow_bridge;
    RAIL_bridge;
}

spriteset(normal_RAIL_tunnels, "gfx/T_RAIL.png") {
    tmpl_tunnels(0,0)
}
spriteset(snow_RAIL_tunnels, "gfx/T_RAIL.png") {
    tmpl_tunnels(276,0)
}
spriteset(normal_RAIL_tunnels_1, "gfx/T_RAIL.png") {
    tmpl_tunnels(0,36)
}
spriteset(snow_RAIL_tunnels_1, "gfx/T_RAIL.png") {
    tmpl_tunnels(276,36)
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_tunnels_0, terrain_type) {
    TILETYPE_SNOW: snow_RAIL_tunnels;
    normal_RAIL_tunnels;
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_tunnels_1, terrain_type) {
    TILETYPE_SNOW: snow_RAIL_tunnels_1;
    normal_RAIL_tunnels_1;
}
switch(FEAT_TRAMTYPES, SELF, switch_RAIL_tunnels, town_zone) {									//TUNNELS
	TOWNZONE_EDGE: switch_RAIL_tunnels_0;
	switch_RAIL_tunnels_1;
}
//===========================================================
//					METRO LINE (MTRO)
//===========================================================
spriteset(switch_MTRO_overlay, "gfx/T_MTRO.png") {									            //OVERLAY
    tmpl_underlay_overlay(321)
}

spriteset(MTRO_depots, "gfx/T_MTRO.png") {
    tmpl_depot(0)
}
spriteset(MTRO_snow_depots, "gfx/T_MTRO.png") {
    tmpl_depot(414)
}
switch(FEAT_TRAMTYPES, SELF, switch_MTRO_depots, terrain_type) {						        //DEPOT
    TILETYPE_SNOW: MTRO_snow_depots;
    MTRO_depots;
}

spriteset(MTRO_gui_UGUI, "gfx/T_MTRO.png") {
    tmpl_UGUI_gui()
}
spriteset(MTRO_gui_GFX_Classic, "gfx/T_MTRO.png") {
    tmpl_GFX_Classic_gui()
}
spriteset(MTRO_gui_GFX, "gfx/T_MTRO.png") {
    tmpl_GFX_gui()
}
spriteset(MTRO_gui_TTD, "gfx/T_MTRO.png") {
    tmpl_TTD_gui()
}
switch (FEAT_TRAMTYPES, SELF, switch_MTRO_gui, param_gui) {										//GUI
    1: MTRO_gui_GFX;
    2: MTRO_gui_GFX_Classic;
    3: MTRO_gui_UGUI;
	MTRO_gui_TTD;
}
//===========================================================
//					UEL0
//===========================================================
spriteset(UEL0_underlay, "gfx/T_UEL0.png") {
    tmpl_underlay_overlay(1)
}
spriteset(UEL0_snow_underlay, "gfx/T_UEL0.png") {
    tmpl_underlay_overlay(81)
}
switch(FEAT_TRAMTYPES, SELF, switch_UEL0_underlay, terrain_type) {								//UNDERLAY
    TILETYPE_SNOW: UEL0_snow_underlay;
    UEL0_underlay;
}

spriteset(UEL0_bridge, "gfx/T_UEL0.png") {
    tmpl_bridge_surfaces(0)
}
spriteset(UEL0_snow_bridge, "gfx/T_UEL0.png") {
    tmpl_bridge_surfaces(414)
}
switch(FEAT_TRAMTYPES, SELF, switch_UEL0_bridge, terrain_type) {								//BRIDGE
    TILETYPE_SNOW: UEL0_snow_bridge;
    UEL0_bridge;
}

spriteset(normal_UEL0_tunnels, "gfx/T_UEL0.png") {
    tmpl_tunnels(0,0)
}
spriteset(snow_UEL0_tunnels, "gfx/T_UEL0.png") {
    tmpl_tunnels(276,0)
}
switch(FEAT_TRAMTYPES, SELF, switch_UEL0_tunnels, terrain_type) {								//TUNNELS
    TILETYPE_SNOW: snow_UEL0_tunnels;
    normal_UEL0_tunnels;
}
//===========================================================
//					METRO LINE (UMT0)
//===========================================================
spriteset(UMT0_depots, "gfx/T_UMT0.png") {
    tmpl_depot(0)
}
spriteset(UMT0_snow_depots, "gfx/T_UMT0.png") {
    tmpl_depot(414)
}
switch(FEAT_TRAMTYPES, SELF, switch_UMT0_depots, terrain_type) {						        //DEPOT
    TILETYPE_SNOW: UMT0_snow_depots;
    UMT0_depots;
}

spriteset(UMT0_gui_UGUI, "gfx/T_UMT0.png") {
    tmpl_UGUI_gui()
}
spriteset(UMT0_gui_GFX_CLassic, "gfx/T_UMT0.png") {
    tmpl_GFX_Classic_gui()
}
spriteset(UMT0_gui_GFX, "gfx/T_UMT0.png") {
    tmpl_GFX_gui()
}
spriteset(UMT0_gui_TTD, "gfx/T_UMT0.png") {
    tmpl_TTD_gui()
}
switch (FEAT_TRAMTYPES, SELF, switch_UMT0_gui, param_gui) {										//GUI
    1: UMT0_gui_GFX;
    2: UMT0_gui_GFX_CLassic;
    3: UMT0_gui_UGUI;
	UMT0_gui_TTD;
}
//==================================================================================================================================
//									TRAMWAY Definitions
//==================================================================================================================================
//===========================================================
//					METRO LINE (MTRO)
//===========================================================
if (tramtype_available("MTRO") || loading_stage == LOADING_STAGE_RESERVE) {	
	item(FEAT_TRAMTYPES, MTRO_tram, 45) {
		property {
			label:							"MTRO";
			name: 							string(STR_2, string(STR_NAME_MTRO), string(STR_3RD_POWERED));
			toolbar_caption: 				string(STR_NAME_MTRO);
            menu_text: 						string(STR_4, string(STR_NAME_MTRO), string(STR_CONSTRUCTION), string(STR_TRAIN), string(STR_3RD_POWERED));
			build_window_caption: 			string(STR_BUILD_WINDOW_CAPTION_METRO);
			autoreplace_text: 				string(STR_AUTOREPLACE_METRO);
			new_engine_text: 				string(STR_NEW_ENGINE_METRO);
			tramtype_flags:					bitmask(TRAMTYPE_FLAG_NO_LEVEL_CROSSING);
			powered_tramtype_list: 			["MTRO", "UMT0"];
			alternative_tramtype_list:		["MABG", "MACG"];
			construction_cost: 				40;
			maintenance_cost:				40;
			sort_order: 					14;
			}
		graphics {
				track_overlay: 			    switch_MTRO_overlay;
				underlay: 				    switch_RAIL_underlay;
				depots: 				    switch_MTRO_depots;
				bridge_surfaces: 		    switch_RAIL_bridge;
                tunnels:                    switch_RAIL_tunnels;
				gui: 					    switch_MTRO_gui;
			}
		}
	}
//===========================================================
//				URBAN METRO LINE (UMT0)
//===========================================================
if (tramtype_available("MTRO") || loading_stage == LOADING_STAGE_RESERVE) {	
	item(FEAT_TRAMTYPES, UMT0_tram, 46) {
		property {
			label:							"UMT0";
			name: 							string(STR_2, string(STR_NAME_UMT0), string(STR_3RD_POWERED));
			toolbar_caption: 				string(STR_NAME_UMT0);
			menu_text: 						string(STR_4, string(STR_NAME_UMT0), string(STR_CONSTRUCTION), string(STR_TRAIN), string(STR_3RD_POWERED));
			build_window_caption: 			string(STR_BUILD_WINDOW_CAPTION_METRO);
			autoreplace_text: 				string(STR_AUTOREPLACE_METRO);
			new_engine_text: 				string(STR_NEW_ENGINE_METRO);
			tramtype_flags:					bitmask(TRAMTYPE_FLAG_NO_LEVEL_CROSSING);
			powered_tramtype_list: 			["MTRO", "UMT0"];
			alternative_tramtype_list:		["MABG", "MACG"];
			requires_tramtype_list:			["MTRO"];
			introduction_date:				date(1960,01,01);
			construction_cost: 				56;
			maintenance_cost:				56;
			sort_order: 					15;
			}
		graphics {
			track_overlay: 			        switch_MTRO_overlay;
			underlay: 				        switch_UEL0_underlay;
			depots: 				        switch_UMT0_depots;
			bridge_surfaces: 		        switch_UEL0_bridge;
            tunnels:                        switch_UEL0_tunnels;
			gui: 					        switch_UMT0_gui;
			}
		}
	}